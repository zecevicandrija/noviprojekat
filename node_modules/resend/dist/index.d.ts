import * as React$1 from 'react';

interface ApiKey {
    created_at: string;
    id: string;
    name: string;
}

interface DomainApiOptions {
    name: string;
    region?: string;
    custom_return_path?: string;
}

declare const RESEND_ERROR_CODES_BY_KEY: {
    readonly missing_required_field: 422;
    readonly invalid_idempotency_key: 400;
    readonly invalid_idempotent_request: 409;
    readonly concurrent_idempotent_requests: 409;
    readonly invalid_access: 422;
    readonly invalid_parameter: 422;
    readonly invalid_region: 422;
    readonly rate_limit_exceeded: 429;
    readonly missing_api_key: 401;
    readonly invalid_api_key: 403;
    readonly suspended_api_key: 403;
    readonly invalid_from_address: 403;
    readonly validation_error: 403;
    readonly not_found: 404;
    readonly method_not_allowed: 405;
    readonly application_error: 500;
    readonly internal_server_error: 500;
};
type RESEND_ERROR_CODE_KEY = keyof typeof RESEND_ERROR_CODES_BY_KEY;
type ErrorResponse = {
    message: string;
    statusCode: number | null;
    name: RESEND_ERROR_CODE_KEY;
};
type Tag$1 = {
    name: string;
    value: string;
};

interface EmailApiAttachment {
    content?: string | Buffer;
    filename?: string | false | undefined;
    path?: string;
    content_type?: string;
    content_id?: string;
}
interface EmailApiOptions {
    from: string;
    to: string | string[];
    subject: string;
    region?: string;
    headers?: Record<string, string>;
    html?: string;
    text?: string;
    bcc?: string | string[];
    cc?: string | string[];
    reply_to?: string | string[];
    scheduled_at?: string;
    tags?: Tag$1[];
    attachments?: EmailApiAttachment[];
}

interface GetOptions {
    query?: Record<string, unknown>;
    headers?: HeadersInit;
}

interface IdempotentRequest {
    /**
     * Unique key that ensures the same operation is not processed multiple times.
     * Allows for safe retries without duplicating operations.
     * If provided, will be sent as the `Idempotency-Key` header.
     */
    idempotencyKey?: string;
}

interface List<T> {
    readonly object: 'list';
    data: T[];
}

type PaginationOptions = {
    /**
     * Maximum number of items to return (1-100, default: 20)
     */
    limit?: number;
} & ({
    /**
     * Get items after this cursor (cannot be used with 'before')
     */
    after?: string;
    before?: never;
} | {
    /**
     * Get items before this cursor (cannot be used with 'after')
     */
    before?: string;
    after?: never;
});

interface PatchOptions {
    query?: {
        [key: string]: unknown;
    };
    headers?: HeadersInit;
}

interface PostOptions {
    query?: {
        [key: string]: unknown;
    };
    headers?: HeadersInit;
}

interface PutOptions {
    query?: {
        [key: string]: unknown;
    };
    headers?: HeadersInit;
}

type RequireAtLeastOne<T> = {
    [K in keyof T]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<keyof T, K>>>;
}[keyof T];

interface CreateApiKeyOptions {
    name: string;
    permission?: 'full_access' | 'sending_access';
    domain_id?: string;
}
interface CreateApiKeyRequestOptions extends PostOptions {
}
interface CreateApiKeyResponseSuccess {
    token: string;
    id: string;
}
type CreateApiKeyResponse = {
    data: CreateApiKeyResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type ListApiKeysOptions = PaginationOptions;
type ListApiKeysResponseSuccess = {
    object: 'list';
    has_more: boolean;
    data: Pick<ApiKey, 'name' | 'id' | 'created_at'>[];
};
type ListApiKeysResponse = {
    data: ListApiKeysResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type RemoveApiKeyResponseSuccess = {};
type RemoveApiKeyResponse = {
    data: RemoveApiKeyResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface Audience {
    created_at: string;
    id: string;
    name: string;
}

interface CreateAudienceOptions {
    name: string;
}
interface CreateAudienceRequestOptions extends PostOptions {
}
interface CreateAudienceResponseSuccess extends Pick<Audience, 'name' | 'id'> {
    object: 'audience';
}
type CreateAudienceResponse = {
    data: CreateAudienceResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface GetAudienceResponseSuccess extends Pick<Audience, 'id' | 'name' | 'created_at'> {
    object: 'audience';
}
type GetAudienceResponse = {
    data: GetAudienceResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type ListAudiencesOptions = PaginationOptions;
type ListAudiencesResponseSuccess = {
    object: 'list';
    data: Audience[];
    has_more: boolean;
};
type ListAudiencesResponse = {
    data: ListAudiencesResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface RemoveAudiencesResponseSuccess extends Pick<Audience, 'id'> {
    object: 'audience';
    deleted: boolean;
}
type RemoveAudiencesResponse = {
    data: RemoveAudiencesResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface EmailRenderOptions$1 {
    /**
     * The React component used to write the message.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    react: React$1.ReactNode;
    /**
     * The HTML version of the message.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    html: string;
    /**
     * The plain text version of the message.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    text: string;
}
interface CreateEmailBaseOptions {
    /**
     * Filename and content of attachments (max 40mb per email)
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    attachments?: Attachment[];
    /**
     * Blind carbon copy recipient email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    bcc?: string | string[];
    /**
     * Carbon copy recipient email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    cc?: string | string[];
    /**
     * Sender email address. To include a friendly name, use the format `"Your Name <sender@domain.com>"`
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    from: string;
    /**
     * Custom headers to add to the email.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    headers?: Record<string, string>;
    /**
     * Reply-to email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    replyTo?: string | string[];
    /**
     * Email subject.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    subject: string;
    /**
     * Email tags
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    tags?: Tag[];
    /**
     * Recipient email address. For multiple addresses, send as an array of strings. Max 50.
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    to: string | string[];
    /**
     * Schedule email to be sent later.
     * The date should be in ISO 8601 format (e.g: 2024-08-05T11:52:01.858Z).
     *
     * @link https://resend.com/docs/api-reference/emails/send-email#body-parameters
     */
    scheduledAt?: string;
}
type CreateEmailOptions = RequireAtLeastOne<EmailRenderOptions$1> & CreateEmailBaseOptions;
interface CreateEmailRequestOptions extends PostOptions, IdempotentRequest {
}
interface CreateEmailResponseSuccess {
    /** The ID of the newly created email. */
    id: string;
}
type CreateEmailResponse = {
    data: CreateEmailResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};
interface Attachment {
    /** Content of an attached file. */
    content?: string | Buffer;
    /** Name of attached file. */
    filename?: string | false | undefined;
    /** Path where the attachment file is hosted */
    path?: string;
    /** Optional content type for the attachment, if not set will be derived from the filename property */
    contentType?: string;
    /**
     * Optional content ID for the attachment, to be used as a reference in the HTML content.
     * If set, this attachment will be sent as an inline attachment and you can reference it in the HTML content using the `cid:` prefix.
     */
    contentId?: string;
}
type Tag = {
    /**
     * The name of the email tag. It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). It can contain no more than 256 characters.
     */
    name: string;
    /**
     * The value of the email tag. It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). It can contain no more than 256 characters.
     */
    value: string;
};

type CreateBatchOptions = CreateEmailOptions[];
interface CreateBatchRequestOptions extends PostOptions, IdempotentRequest {
    /**
     * @default 'strict'
     */
    batchValidation?: 'strict' | 'permissive';
}
type CreateBatchSuccessResponse<Options extends CreateBatchRequestOptions = CreateBatchRequestOptions> = {
    data: {
        /** The ID of the newly created email. */
        id: string;
    }[];
} & (Options['batchValidation'] extends 'permissive' ? {
    /**
     * Only present when header "x-batch-validation" is set to 'permissive'.
     */
    errors: {
        /**
         * The index of the failed email in the batch
         */
        index: number;
        /**
         * The error message for the failed email
         */
        message: string;
    }[];
} : Record<string, never>);
type CreateBatchResponse<Options extends CreateBatchRequestOptions> = {
    data: CreateBatchSuccessResponse<Options>;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface Broadcast {
    id: string;
    name: string;
    audience_id: string | null;
    from: string | null;
    subject: string | null;
    reply_to: string[] | null;
    preview_text: string | null;
    status: 'draft' | 'sent' | 'queued';
    created_at: string;
    scheduled_at: string | null;
    sent_at: string | null;
    html: string | null;
    text: string | null;
}

interface EmailRenderOptions {
    /**
     * The React component used to write the message.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    react: React$1.ReactNode;
    /**
     * The HTML version of the message.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    html: string;
    /**
     * The plain text version of the message.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    text: string;
}
interface CreateBroadcastBaseOptions {
    /**
     * The name of the broadcast
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    name?: string;
    /**
     * The id of the audience you want to send to
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    audienceId: string;
    /**
     * A short snippet of text displayed as a preview in recipients' inboxes, often shown below or beside the subject line.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    previewText?: string;
    /**
     * Sender email address. To include a friendly name, use the format `"Your Name <sender@domain.com>"`
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    from: string;
    /**
     * Reply-to email address. For multiple addresses, send as an array of strings.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    replyTo?: string | string[];
    /**
     * Email subject.
     *
     * @link https://resend.com/docs/api-reference/broadcasts/create#body-parameters
     */
    subject: string;
}
type CreateBroadcastOptions = RequireAtLeastOne<EmailRenderOptions> & CreateBroadcastBaseOptions;
interface CreateBroadcastRequestOptions extends PostOptions {
}
interface CreateBroadcastResponseSuccess {
    /** The ID of the newly sent broadcasts. */
    id: string;
}
type CreateBroadcastResponse = {
    data: CreateBroadcastResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface GetBroadcastResponseSuccess extends Broadcast {
    object: 'broadcast';
}
type GetBroadcastResponse = {
    data: GetBroadcastResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type ListBroadcastsOptions = PaginationOptions;
type ListBroadcastsResponseSuccess = {
    object: 'list';
    has_more: boolean;
    data: Pick<Broadcast, 'id' | 'name' | 'audience_id' | 'status' | 'created_at' | 'scheduled_at' | 'sent_at'>[];
};
type ListBroadcastsResponse = {
    data: ListBroadcastsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface RemoveBroadcastResponseSuccess extends Pick<Broadcast, 'id'> {
    object: 'broadcast';
    deleted: boolean;
}
type RemoveBroadcastResponse = {
    data: RemoveBroadcastResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface SendBroadcastBaseOptions {
    /**
     * Schedule email to be sent later.
     * The date should be in ISO 8601 format (e.g: 2024-08-05T11:52:01.858Z)
     * or relative time (eg: in 2 days).
     *
     * @link https://resend.com/docs/api-reference/broadcasts/send#body-parameters
     */
    scheduledAt?: string;
}
type SendBroadcastOptions = SendBroadcastBaseOptions;
interface SendBroadcastRequestOptions extends PostOptions {
}
interface SendBroadcastResponseSuccess {
    /** The ID of the sent broadcast. */
    id: string;
}
type SendBroadcastResponse = {
    data: SendBroadcastResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface UpdateBroadcastResponseSuccess {
    id: string;
}
type UpdateBroadcastOptions = {
    name?: string;
    audienceId?: string;
    from?: string;
    html?: string;
    react?: React.ReactNode;
    text?: string;
    subject?: string;
    replyTo?: string[];
    previewText?: string;
};
type UpdateBroadcastResponse = {
    data: UpdateBroadcastResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface Contact {
    created_at: string;
    id: string;
    email: string;
    first_name?: string;
    last_name?: string;
    unsubscribed: boolean;
}
type SelectingField = {
    /**
     * The contact id.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    id: string;
    /**
     * The contact email.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    email?: undefined | null;
} | {
    /**
     * The contact id.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    id?: undefined | null;
    /**
     * The contact email.
     *
     * @link https://resend.com/docs/api-reference/contacts/delete-contact#body-parameters
     */
    email: string;
};

interface CreateContactOptions {
    audienceId: string;
    email: string;
    unsubscribed?: boolean;
    firstName?: string;
    lastName?: string;
}
interface CreateContactRequestOptions extends PostOptions {
}
interface CreateContactResponseSuccess extends Pick<Contact, 'id'> {
    object: 'contact';
}
type CreateContactResponse = {
    data: CreateContactResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type GetContactOptions = {
    audienceId: string;
} & SelectingField;
interface GetContactResponseSuccess extends Pick<Contact, 'id' | 'email' | 'created_at' | 'first_name' | 'last_name' | 'unsubscribed'> {
    object: 'contact';
}
type GetContactResponse = {
    data: GetContactResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type ListContactsOptions = {
    audienceId: string;
} & PaginationOptions;
interface ListContactsResponseSuccess {
    object: 'list';
    data: Contact[];
    has_more: boolean;
}
type ListContactsResponse = {
    data: ListContactsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type RemoveContactsResponseSuccess = {
    object: 'contact';
    deleted: boolean;
    contact: string;
};
type RemoveContactOptions = SelectingField & {
    audienceId: string;
};
type RemoveContactsResponse = {
    data: RemoveContactsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type UpdateContactOptions = {
    audienceId: string;
    unsubscribed?: boolean;
    firstName?: string;
    lastName?: string;
} & SelectingField;
type UpdateContactResponseSuccess = Pick<Contact, 'id'> & {
    object: 'contact';
};
type UpdateContactResponse = {
    data: UpdateContactResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type DomainRegion = 'us-east-1' | 'eu-west-1' | 'sa-east-1' | 'ap-northeast-1';
type DomainNameservers = 'Amazon Route 53' | 'Cloudflare' | 'Digital Ocean' | 'GoDaddy' | 'Google Domains' | 'Namecheap' | 'Unidentified' | 'Vercel';
type DomainStatus = 'pending' | 'verified' | 'failed' | 'temporary_failure' | 'not_started';
type DomainRecords = DomainSpfRecord | DomainDkimRecord;
interface DomainSpfRecord {
    record: 'SPF';
    name: string;
    value: string;
    type: 'MX' | 'TXT';
    ttl: string;
    status: DomainStatus;
    routing_policy?: string;
    priority?: number;
    proxy_status?: 'enable' | 'disable';
}
interface DomainDkimRecord {
    record: 'DKIM';
    name: string;
    value: string;
    type: 'CNAME' | 'TXT';
    ttl: string;
    status: DomainStatus;
    routing_policy?: string;
    priority?: number;
    proxy_status?: 'enable' | 'disable';
}
interface Domain {
    id: string;
    name: string;
    status: DomainStatus;
    created_at: string;
    region: DomainRegion;
}

interface CreateDomainOptions {
    name: string;
    region?: DomainRegion;
    customReturnPath?: string;
}
interface CreateDomainRequestOptions extends PostOptions {
}
interface CreateDomainResponseSuccess extends Pick<Domain, 'name' | 'id' | 'status' | 'created_at' | 'region'> {
    records: DomainRecords[];
}
type CreateDomainResponse = {
    data: CreateDomainResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface GetDomainResponseSuccess extends Pick<Domain, 'id' | 'name' | 'created_at' | 'region' | 'status'> {
    object: 'domain';
    records: DomainRecords[];
}
type GetDomainResponse = {
    data: GetDomainResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type ListDomainsOptions = PaginationOptions;
type ListDomainsResponseSuccess = {
    data: Domain[];
    object: 'list';
    has_more: boolean;
};
type ListDomainsResponse = {
    data: ListDomainsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type RemoveDomainsResponseSuccess = Pick<Domain, 'id'> & {
    object: 'domain';
    deleted: boolean;
};
type RemoveDomainsResponse = {
    data: RemoveDomainsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface UpdateDomainsOptions {
    id: string;
    clickTracking?: boolean;
    openTracking?: boolean;
    tls?: 'enforced' | 'opportunistic';
}
type UpdateDomainsResponseSuccess = Pick<Domain, 'id'> & {
    object: 'domain';
};
type UpdateDomainsResponse = {
    data: UpdateDomainsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type VerifyDomainsResponseSuccess = Pick<Domain, 'id'> & {
    object: 'domain';
};
type VerifyDomainsResponse = {
    data: VerifyDomainsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface CancelEmailResponseSuccess {
    object: 'email';
    id: string;
}
type CancelEmailResponse = {
    data: CancelEmailResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface GetEmailResponseSuccess {
    bcc: string[] | null;
    cc: string[] | null;
    created_at: string;
    from: string;
    html: string | null;
    id: string;
    last_event: 'bounced' | 'canceled' | 'clicked' | 'complained' | 'delivered' | 'delivery_delayed' | 'failed' | 'opened' | 'queued' | 'scheduled' | 'sent';
    reply_to: string[] | null;
    subject: string;
    text: string | null;
    tags?: {
        name: string;
        value: string;
    }[];
    to: string[];
    scheduled_at: string | null;
    object: 'email';
}
type GetEmailResponse = {
    data: GetEmailResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface UpdateEmailOptions {
    id: string;
    scheduledAt: string;
}
interface UpdateEmailResponseSuccess {
    id: string;
    object: 'email';
}
type UpdateEmailResponse = {
    data: UpdateEmailResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type WebhookEvent = 'email.sent' | 'email.delivered' | 'email.delivery_delayed' | 'email.complained' | 'email.bounced' | 'email.opened' | 'email.clicked' | 'email.received' | 'email.failed' | 'contact.created' | 'contact.updated' | 'contact.deleted' | 'domain.created' | 'domain.updated' | 'domain.deleted';

interface CreateWebhookOptions {
    endpoint: string;
    events: WebhookEvent[];
}
interface CreateWebhookRequestOptions extends PostOptions {
}
interface CreateWebhookResponseSuccess {
    object: 'webhook';
    id: string;
    signing_secret: string;
}
type CreateWebhookResponse = {
    data: CreateWebhookResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface GetWebhookResponseSuccess {
    object: 'webhook';
    id: string;
    created_at: string;
    status: 'enabled' | 'disabled';
    endpoint: string;
    events: WebhookEvent[] | null;
    signing_secret: string;
}
type GetWebhookResponse = {
    data: GetWebhookResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type ListWebhooksOptions = PaginationOptions;
interface Webhook {
    id: string;
    endpoint: string;
    created_at: string;
    status: 'enabled' | 'disabled';
    events: WebhookEvent[] | null;
}
type ListWebhooksResponseSuccess = {
    object: 'list';
    has_more: boolean;
    data: Webhook[];
};
type ListWebhooksResponse = {
    data: ListWebhooksResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

type RemoveWebhookResponseSuccess = Pick<Webhook, 'id'> & {
    object: 'webhook';
    deleted: boolean;
};
type RemoveWebhookResponse = {
    data: RemoveWebhookResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

interface UpdateWebhookOptions {
    endpoint?: string;
    events?: WebhookEvent[];
    status?: 'enabled' | 'disabled';
}
interface UpdateWebhookResponseSuccess {
    object: 'webhook';
    id: string;
}
type UpdateWebhookResponse = {
    data: UpdateWebhookResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

declare class ApiKeys {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateApiKeyOptions, options?: CreateApiKeyRequestOptions): Promise<CreateApiKeyResponse>;
    list(options?: ListApiKeysOptions): Promise<ListApiKeysResponse>;
    remove(id: string): Promise<RemoveApiKeyResponse>;
}

declare class Audiences {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateAudienceOptions, options?: CreateAudienceRequestOptions): Promise<CreateAudienceResponse>;
    list(options?: ListAudiencesOptions): Promise<ListAudiencesResponse>;
    get(id: string): Promise<GetAudienceResponse>;
    remove(id: string): Promise<RemoveAudiencesResponse>;
}

declare class Batch {
    private readonly resend;
    constructor(resend: Resend);
    send<Options extends CreateBatchRequestOptions>(payload: CreateBatchOptions, options?: Options): Promise<CreateBatchResponse<Options>>;
    create<Options extends CreateBatchRequestOptions>(payload: CreateBatchOptions, options?: Options): Promise<CreateBatchResponse<Options>>;
}

declare class Broadcasts {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateBroadcastOptions, options?: CreateBroadcastRequestOptions): Promise<SendBroadcastResponse>;
    send(id: string, payload?: SendBroadcastOptions): Promise<SendBroadcastResponse>;
    list(options?: ListBroadcastsOptions): Promise<ListBroadcastsResponse>;
    get(id: string): Promise<GetBroadcastResponse>;
    remove(id: string): Promise<RemoveBroadcastResponse>;
    update(id: string, payload: UpdateBroadcastOptions): Promise<UpdateBroadcastResponse>;
}

declare class Contacts {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateContactOptions, options?: CreateContactRequestOptions): Promise<CreateContactResponse>;
    list(options: ListContactsOptions): Promise<ListContactsResponse>;
    get(options: GetContactOptions): Promise<GetContactResponse>;
    update(options: UpdateContactOptions): Promise<UpdateContactResponse>;
    remove(payload: RemoveContactOptions): Promise<RemoveContactsResponse>;
}

declare class Domains {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateDomainOptions, options?: CreateDomainRequestOptions): Promise<CreateDomainResponse>;
    list(options?: ListDomainsOptions): Promise<ListDomainsResponse>;
    get(id: string): Promise<GetDomainResponse>;
    update(payload: UpdateDomainsOptions): Promise<UpdateDomainsResponse>;
    remove(id: string): Promise<RemoveDomainsResponse>;
    verify(id: string): Promise<VerifyDomainsResponse>;
}

type ListEmailsOptions = PaginationOptions;
type ListEmail = Omit<GetEmailResponseSuccess, 'html' | 'text' | 'tags' | 'object'>;
type ListEmailsResponseSuccess = {
    object: 'list';
    has_more: boolean;
    data: ListEmail[];
};
type ListEmailsResponse = {
    data: ListEmailsResponseSuccess;
    error: null;
} | {
    data: null;
    error: ErrorResponse;
};

declare class Emails {
    private readonly resend;
    constructor(resend: Resend);
    send(payload: CreateEmailOptions, options?: CreateEmailRequestOptions): Promise<CreateEmailResponse>;
    create(payload: CreateEmailOptions, options?: CreateEmailRequestOptions): Promise<CreateEmailResponse>;
    get(id: string): Promise<GetEmailResponse>;
    list(options?: ListEmailsOptions): Promise<ListEmailsResponse>;
    update(payload: UpdateEmailOptions): Promise<UpdateEmailResponse>;
    cancel(id: string): Promise<CancelEmailResponse>;
}

interface Headers {
    id: string;
    timestamp: string;
    signature: string;
}
interface VerifyWebhookOptions {
    payload: string;
    headers: Headers;
    webhookSecret: string;
}
declare class Webhooks {
    private readonly resend;
    constructor(resend: Resend);
    create(payload: CreateWebhookOptions, options?: CreateWebhookRequestOptions): Promise<CreateWebhookResponse>;
    get(id: string): Promise<GetWebhookResponse>;
    list(options?: ListWebhooksOptions): Promise<ListWebhooksResponse>;
    update(id: string, payload: UpdateWebhookOptions): Promise<UpdateWebhookResponse>;
    remove(id: string): Promise<RemoveWebhookResponse>;
    verify(payload: VerifyWebhookOptions): unknown;
}

declare class Resend {
    readonly key?: string | undefined;
    private readonly headers;
    readonly apiKeys: ApiKeys;
    readonly audiences: Audiences;
    readonly batch: Batch;
    readonly broadcasts: Broadcasts;
    readonly contacts: Contacts;
    readonly domains: Domains;
    readonly emails: Emails;
    readonly webhooks: Webhooks;
    constructor(key?: string | undefined);
    fetchRequest<T>(path: string, options?: {}): Promise<{
        data: T;
        error: null;
    } | {
        data: null;
        error: ErrorResponse;
    }>;
    post<T>(path: string, entity?: unknown, options?: PostOptions & IdempotentRequest): Promise<{
        data: null;
        error: ErrorResponse;
    } | {
        data: T;
        error: null;
    }>;
    get<T>(path: string, options?: GetOptions): Promise<{
        data: null;
        error: ErrorResponse;
    } | {
        data: T;
        error: null;
    }>;
    put<T>(path: string, entity: unknown, options?: PutOptions): Promise<{
        data: null;
        error: ErrorResponse;
    } | {
        data: T;
        error: null;
    }>;
    patch<T>(path: string, entity: unknown, options?: PatchOptions): Promise<{
        data: null;
        error: ErrorResponse;
    } | {
        data: T;
        error: null;
    }>;
    delete<T>(path: string, query?: unknown): Promise<{
        data: null;
        error: ErrorResponse;
    } | {
        data: T;
        error: null;
    }>;
}

export { type ApiKey, type Attachment, type Audience, type Broadcast, type CancelEmailResponse, type CancelEmailResponseSuccess, type Contact, type CreateApiKeyOptions, type CreateApiKeyRequestOptions, type CreateApiKeyResponse, type CreateApiKeyResponseSuccess, type CreateAudienceOptions, type CreateAudienceRequestOptions, type CreateAudienceResponse, type CreateAudienceResponseSuccess, type CreateBatchOptions, type CreateBatchRequestOptions, type CreateBatchResponse, type CreateBatchSuccessResponse, type CreateBroadcastOptions, type CreateBroadcastRequestOptions, type CreateBroadcastResponse, type CreateBroadcastResponseSuccess, type CreateContactOptions, type CreateContactRequestOptions, type CreateContactResponse, type CreateContactResponseSuccess, type CreateDomainOptions, type CreateDomainRequestOptions, type CreateDomainResponse, type CreateDomainResponseSuccess, type CreateEmailOptions, type CreateEmailRequestOptions, type CreateEmailResponse, type CreateEmailResponseSuccess, type CreateWebhookOptions, type CreateWebhookRequestOptions, type CreateWebhookResponse, type CreateWebhookResponseSuccess, type Domain, type DomainApiOptions, type DomainDkimRecord, type DomainNameservers, type DomainRecords, type DomainRegion, type DomainSpfRecord, type DomainStatus, type EmailApiAttachment, type EmailApiOptions, type ErrorResponse, type GetAudienceResponse, type GetAudienceResponseSuccess, type GetBroadcastResponse, type GetBroadcastResponseSuccess, type GetContactOptions, type GetContactResponse, type GetContactResponseSuccess, type GetDomainResponse, type GetDomainResponseSuccess, type GetEmailResponse, type GetEmailResponseSuccess, type GetOptions, type GetWebhookResponse, type GetWebhookResponseSuccess, type IdempotentRequest, type List, type ListApiKeysOptions, type ListApiKeysResponse, type ListApiKeysResponseSuccess, type ListAudiencesOptions, type ListAudiencesResponse, type ListAudiencesResponseSuccess, type ListBroadcastsOptions, type ListBroadcastsResponse, type ListBroadcastsResponseSuccess, type ListContactsOptions, type ListContactsResponse, type ListContactsResponseSuccess, type ListDomainsOptions, type ListDomainsResponse, type ListDomainsResponseSuccess, type ListWebhooksOptions, type ListWebhooksResponse, type ListWebhooksResponseSuccess, type PaginationOptions, type PatchOptions, type PostOptions, type PutOptions, type RemoveApiKeyResponse, type RemoveApiKeyResponseSuccess, type RemoveAudiencesResponse, type RemoveAudiencesResponseSuccess, type RemoveBroadcastResponse, type RemoveBroadcastResponseSuccess, type RemoveContactOptions, type RemoveContactsResponse, type RemoveContactsResponseSuccess, type RemoveDomainsResponse, type RemoveDomainsResponseSuccess, type RemoveWebhookResponse, type RemoveWebhookResponseSuccess, type RequireAtLeastOne, Resend, type SelectingField, type SendBroadcastOptions, type SendBroadcastRequestOptions, type SendBroadcastResponse, type SendBroadcastResponseSuccess, type Tag, type UpdateBroadcastOptions, type UpdateBroadcastResponse, type UpdateBroadcastResponseSuccess, type UpdateContactOptions, type UpdateContactResponse, type UpdateContactResponseSuccess, type UpdateDomainsOptions, type UpdateDomainsResponse, type UpdateDomainsResponseSuccess, type UpdateEmailOptions, type UpdateEmailResponse, type UpdateEmailResponseSuccess, type UpdateWebhookOptions, type UpdateWebhookResponse, type UpdateWebhookResponseSuccess, type VerifyDomainsResponse, type VerifyDomainsResponseSuccess, type Webhook, type WebhookEvent };
